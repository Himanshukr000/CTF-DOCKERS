import socket
import os
import sys
from time import sleep
from binascii import hexlify
from DiffieHellman import DiffieHellman
from base64 import b64encode, b64decode
from AESCipher import AESCipher

TCP_IP = '0.0.0.0'
TCP_PORT = 5005

def recvall(sock, n):
# Helper function to recv n bytes or return None if EOF is hit
    data = b''
    while len(data) < n:
        sock.settimeout(20)
        packet = sock.recv(n - len(data))
        if not packet:
            print("Timeoute")
            return None
        data += packet
    return data

while True:
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((TCP_IP, TCP_PORT))
        sock.listen(1)

        print("Listening on {}:{}".format(TCP_IP, TCP_PORT))
        sys.stdout.flush()
    except Exception as e:
        print(e)
        pass

    while True:
        try:
            print("Waiting for conn")
            sys.stdout.flush()
            conn, addr = sock.accept()
            m = recvall(conn, 2468)
#            m = conn.recv(10000).decode()
            print("Recvd: ", m)
            print("Len: ", len(m))
            sys.stdout.flush()
            data = b64decode(m) # buffer size is 1024 bytes
            print("Recved pub key")
            sys.stdout.flush()
    
            b = DiffieHellman()
            msg = b64encode(str(b.publicKey).encode())
            conn.sendall(msg)

            b.genKey(int(data))
            print("Generated private key")
            sys.stdout.flush()
    #        ciphertext = conn.recv(4096)

            aes = AESCipher(b.key)

            f = open('script.txt')

            count = 0
            for line in f:
    #            print("In loop")
                if count % 2 == 1:
                    ciphertext = aes.encrypt(line)
                    conn.sendall(ciphertext)
                    print("Sending {}".format(line))
                else:
                    ciphertext = conn.recv(4096)
                    data = aes.decrypt(ciphertext)
                    print("Recvd {}".format(data))
                    if data != line:
                        ciphertext = aes.encrypt("Hmmm... That doesn't sound right")
                        conn.sendall(ciphertext)
                        print("Hmmm... That doesn't sound right: {}".format(line))
                        break
                count += 1

            conn.close()
            print("Done")
            sys.stdout.flush()

        except Exception as e:
            print(e)
#            conn.sendall(e)
            conn.close()
            pass 
        sleep(1)
