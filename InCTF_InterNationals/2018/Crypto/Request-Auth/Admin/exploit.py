from pwn import *
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Util.number import *

def check_valid_request(s):
    try:
        s = s.split(":")
    except:
        return False
    if len(s) != 3:
    	return False
    if s[0] != "bi0s":
    	return False
    if s[1][:7] != "userid=":
    	return False
    if s[2][:5] != "user=":
    	return False
    return True

def pad(s):
    s += chr(16 - len(s)%16)*(16 - len(s)%16)
    return s

def send_enc_key(key):
    r.recvuntil("Enter encrypted key value in hex: ")
    send_key = hex(key)[2:].replace("L","")
    r.sendline(send_key)

def send_enc_session(enc_session):
    r.recvuntil("Enter value of encrypted session request in hex: ")
    send_session = enc_session.encode("hex")
    r.sendline(send_session)

def check_enc_req_validity():
    validity = r.recvuntil("!").split("\n")[1]
    if validity == "Valid request!":
        return 1
    elif validity == "Invalid request!":
        return 0
    else:
        return -1

def encrypt_request(request, key, iv):
    if check_valid_request(request) == False:
        print "Cannot encrypt invalid request"
        return -1
    obj1 = AES.new(key, AES.MODE_CBC, iv)
    ct = obj1.encrypt(pad(request))
    return ct

# Reading values from files
key_enc = bytes_to_long(open("../Handout/key.enc").read())
iv = open("iv.txt").read()
session_enc = open("../Handout/session.enc").read()
publickey = RSA.importKey(open("../Handout/publickey.pem").read())

# Final decrypted key
global_dec_key = ""

# Pre-test: should return true
r = remote("18.224.31.42","1337")
key_payload = key_enc
send_enc_key(key_payload)
send_enc_session(session_enc)
print "[+] Pre-test results: ", check_enc_req_validity()
r.close()

# Exploit
for i in range(127, -1, -1):
    r = process("18.224.31.42","1337")
    key_payload = (key_enc*pow(2, i*publickey.e, publickey.n)) % publickey.n
    key_dec = hex(int("0" + global_dec_key[::-1] + "0"*i, 2))[2:].replace("L","").zfill(32).decode("hex")
    enc_session_payload = encrypt_request("bi0s:userid=test:user=test2", key_dec, iv)

    # Sending the payload to the service
    send_enc_key(key_payload)
    send_enc_session(enc_session_payload)

    # Checking if the request is valid
    if check_enc_req_validity() == 1:
         global_dec_key += "0"
    else:
         global_dec_key += "1"
    r.close()

AES_session_key = hex(int(global_dec_key[::-1], 2))[2:].replace("L","").zfill(32).decode("hex")
obj1 = AES.new(AES_session_key, AES.MODE_CBC, iv)
print "Here we go: ", obj1.decrypt(session_enc)
