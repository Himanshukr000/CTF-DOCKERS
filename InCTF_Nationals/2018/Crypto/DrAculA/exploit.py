from Crypto.Util.number import *
from gmpy2 import *
import glob
from sage import *

def calculatePrimes():

    def Big(l):
        prod = 1
        for i in l:
            prod*=i
        return next_prime(2*prod+1)
    files = glob.glob(".logs/*.log")
    files = sorted(files)
    #calculate the small primes
    primes = []
    for i in files:
        with open(i) as f:
            data = f.read().split(":")
            primes.append(gcd(int(data[0]),int(data[1])))
    
    # Calculate the Big primes
    P = Big(primes[0:3])
    Q = Big(primes[3:6])
    R = Big(primes[6:9])

    return [P,Q,R]


#solving Van3Helsing
a = calculatePrimes()
P = a[0]
Q = a[1]
R = a[2]
phi = ((P-1)*(Q-1)*(R-1))
N = int(open("mod.ul.us").read())
C = int(open("ci.pher.text").read())
E = 65537
d = invert(E,phi)
flag1 = long_to_bytes(pow(C,d,N))
print flag1


#solving DrAculA
files = glob.glob(".logs/*.log")
files = sorted(files)
with open(files[-1]) as f:
    data = f.read().split(":")
    p = gcd(int(data[0]),int(data[1]))
g,y = map(int,open('pub.lic').read().split(":"))
lower_bound = bytes_to_long("}"+"0"*5)
upper_bound = bytes_to_long("}"+chr(128)*5)

## End of python script
## Now open sage and calculate
#>>> discrete_log_lambda(y,Mod(g,p),(lower_bound,upper_bound))
print "discrete_log_lambda({},Mod({},{}),({},{}))".format(y,g,p,lower_bound,upper_bound)
### and long_to_bytes(137659394711411) 
## to get part two of the flag

flag2 = long_to_bytes(137659394711411)
print flag2

print "flag is ",flag1+flag2[::-1]


