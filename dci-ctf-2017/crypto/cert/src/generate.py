from Crypto.PublicKey import RSA
from Crypto.Util.number import *

p = 61282541611444059014079217826482984345089335656059797088471767298005892676593137331675171224692889454543936366444182431985413807875954563566649878913681618784596366868341000810403308935135453247709532889452879201245993995271856548864337324596646684558543360398328974665603961470254864400782477741441715547989L
q = 61282541611444059014079217826482984345089335656059797088471767298005892676593137331675171224692889454543936366444182431985413807875954563566649878913681618784596366868341000810403308935135453247709532889452879201245993995271856548864337324596646684558543360398328974665603961470254864400782477741441715548621L

n = p * q

print n

e = 65537L
d = inverse(e, (p - 1) * (q - 1))

key = RSA.construct((n, e, d))

open('weak.key', 'w').write(key.exportKey())
