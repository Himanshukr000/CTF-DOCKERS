#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <iostream>
#include <pthread.h>
#include <thread>
#include <arpa/inet.h>
#include <signal.h>
#define MAX_THREADS 50
#define TIMEOUT 20

using namespace std;

void banner (int * fd)
{
	send(*fd, "\n     ____________   ___  ___     _____      _____           \n", 62, MSG_NOSIGNAL);
	send(*fd, "    / __/ ___/ _ | / _ \\/ _ |   / __/ | /| / / _ \\  (\\(\\    \n", 61, MSG_NOSIGNAL);
	send(*fd, "   _\\ \\/ /__/ __ |/ // / __ |  / _/ | |/ |/ / , _/  (^.^)   \n", 61, MSG_NOSIGNAL);
	send(*fd, "  /___/\\___/_/ |_/____/_/ |_| /_/   |__/|__/_/|_|  o_(\")(\") \n", 61, MSG_NOSIGNAL);
	send(*fd, " ================================ command panel ============\n", 61, MSG_NOSIGNAL);
}
void * login (void * slot);

void commander(int conn);

static int connection_fd;

void debug(void)
{
	printf("Debug function. Remove on production");
	char * flag = "/bin/cat /opt/scada/flag.txt";
	system("/bin/cat /opt/scada/debug.txt");
}


int main(int argc, char* argv[])
{
	// Vars
  int port, socket_fd;
  socklen_t len;
  struct sockaddr_in server_addr, client_addr;
	port = 9004;
	pthread_t threads[MAX_THREADS];
	int pool_slot[MAX_THREADS];

  // Create socket
  socket_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
  if(socket_fd < 0)  {
      perror("Cannot open socket\n");
      return 0;
  }

  bzero((char*) &server_addr, sizeof(server_addr));
  server_addr.sin_family = AF_INET;
  server_addr.sin_addr.s_addr = INADDR_ANY;
  server_addr.sin_port = htons(port);

	// Setting Reuse Socket for quick crash recovery
	int enable = 1;
	if (setsockopt(socket_fd, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int)) < 0)
		perror("Cannot SO_REUSEADDR\n");
	if (setsockopt(socket_fd, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(int)) < 0)
		perror("Cannot SO_REUSEPORT\n");

  // Bind Socket
  if(bind(socket_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)    {
      perror("Cannot bind\n");
      return 0;
  }
  listen(socket_fd, 5);
	len = sizeof(client_addr);
  while(true)
	{
    connection_fd = accept(socket_fd, (struct sockaddr *)&client_addr, &len);
    if (connection_fd < 0) return 0;
		bool free_slot = false;
		for(int x=0; x < MAX_THREADS; x++) {
			if (pool_slot[x] != 1) {
				pthread_create(&threads[x], NULL, login, (void *) &pool_slot[x]);
				pool_slot[x] = 1;
				free_slot = true;
				break;
			}
		}
		if(!free_slot) {
			send(connection_fd, "\n Maximum number of clients reached. Please try again later.\n", 61, MSG_NOSIGNAL);
			close(connection_fd);
		}
  }
	close(connection_fd);
	close(socket_fd);
  return 0;
}


void * login (void * slot)
{
	int connection_thread = connection_fd;
	struct timeval timeout;
		timeout.tv_sec = TIMEOUT;
		timeout.tv_usec = 0;
	fd_set set;
	FD_ZERO(&set);
	FD_SET(connection_thread, &set);

	char user[20];
	char pass[20];
	char response[25];

	banner(&connection_thread);
	for (int intento = 0; intento < 3; intento++)
	{
		bzero(user, sizeof(user));
		bzero(pass, sizeof(pass));
		bzero(response, sizeof(response));
		send(connection_thread, "\n LOGIN\n  > ", 12, MSG_NOSIGNAL);
		if (select(connection_thread+1, &set, NULL, NULL, &timeout) > 0)  {
			read(connection_thread, user, sizeof(user));
		}
		else {
			send(connection_thread, " \nConnection Timeout\n", 21, MSG_NOSIGNAL);
			break;
		}
		send(connection_thread, " PASS\n  > ", 10, MSG_NOSIGNAL);
		if (select(connection_thread+1, &set, NULL, NULL, &timeout) > 0)  {
			read(connection_thread, pass, sizeof(pass));
		}
		else {
			send(connection_thread, " \nConnection Timeout\n", 21, MSG_NOSIGNAL);
			break;
		}

		string suser(user);
		string spass(pass);

		if(suser == "admin\n" && spass == "CON3JIL\n"){
		//if(suser == "TEST\n" && spass == "TEST\n") {
			commander(connection_thread);
			break;
		}
		else if (suser == "TEST\n") {
			send(connection_thread,"\n *AUTHENTICATION FAILED\n",25, MSG_NOSIGNAL);
		}
		else {
			sprintf(response, "%s", user);
			send(connection_thread,"\n *USER NOT FOUND: ", 19, MSG_NOSIGNAL);
			send(connection_thread, response, strlen(response) < sizeof(response) ? strlen(response) : sizeof(response), MSG_NOSIGNAL);
		}
	}
  close(connection_thread);
	// Free thread slot
	int* free_slot = (int*)slot;
  *free_slot = 0;
}

void commander(int conn)
{
	char command[25];
	bzero(command, sizeof(command));
	struct timeval timeout;
		timeout.tv_sec = TIMEOUT;
		timeout.tv_usec = 0;
	fd_set set;
	FD_ZERO(&set);
	FD_SET(conn, &set);
	dup2(conn, STDOUT_FILENO);
	dup2(conn, STDERR_FILENO);
	send(conn,"\n Input Queue",13, MSG_NOSIGNAL);
	send(conn, "\n # ", 4, MSG_NOSIGNAL);
	if (select(conn+1, &set, NULL, NULL, &timeout) > 0)  {
		read(conn, command, 100);
		send(conn, " \nAdded to queue. Bye Bye.\n", 27, MSG_NOSIGNAL);
	}
	else {
		send(conn, " \nConnection Timeout\n", 21, MSG_NOSIGNAL);
	}
}
